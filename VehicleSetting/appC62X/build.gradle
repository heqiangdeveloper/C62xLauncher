//def product = rootProject.product
def product = '3Y1'
//apply from: '../config.gradle'

apply plugin: 'com.android.application'

android {

    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 28
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.1"
        buildConfigField "String", "PRODUCT", "\""+product+"\""
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //applicationId 'com.chinatsp.settings'
    }

    signingConfigs {
        production {
            storeFile file("./E02F202MCA.keystore")
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            ////添加多个源代码目录
            java.srcDirs = ['src', 'src-iof', 'src-gen']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jni.srcDirs = ['jni']
            jniLibs.srcDir 'libs'
        }
        //instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.production
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.production
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName
            def date = new Date()
            //def formattedDate = date.format('yyyyMMdd')
            def formattedDate = date.format('yyyy')
            if (variant.buildType.name.equals('release')) {
                //fileName = "Settings3Y1_${variant.mergedFlavor.versionName}_release.apk"
                fileName = "C62X_VehicleSetting.apk"
            } else if (variant.buildType.name.equals('debug')) {
                fileName = "C62X_VehicleSetting${variant.mergedFlavor.versionName}_debug.apk"
            }
            outputFileName = fileName;
        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs.add('-Xbootclasspath/p:appC62X\\libs\\classes-full-debug.jar')
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    //compileOnly files('libs/car-libs.jar')
    compileOnly files('libs/classes-full-debug.jar')
    implementation project(':carlib')
    implementation 'androidx.fragment:fragment:1.3.6'

}
